import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          disabledBackgroundColor: appTheme.blueGray50,
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return appTheme.gray100;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return appTheme.gray100;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.black900.withOpacity(0.2),
      ),
      bottomNavigationBarTheme:
          BottomNavigationBarThemeData(backgroundColor: Colors.transparent),
      bottomAppBarTheme:
          BottomAppBarTheme(color: Colors.transparent, height: 20),
      datePickerTheme: DatePickerThemeData(
          weekdayStyle: TextStyle(
            fontSize: 15,
            color: Colors.black,
          ),
          dayStyle: TextStyle(
            fontSize: 15,
            color: Colors.black,
          ),
          headerHeadlineStyle: TextStyle(
            fontSize: 30,
            fontWeight: FontWeight.bold,
          ),
          headerHelpStyle: TextStyle(
            fontSize: 30,
            fontWeight: FontWeight.bold,
          ),
          dayForegroundColor: MaterialStateColor.resolveWith((states) {
            if (DateTime.sunday == DateTime.utc(2023)) {
              print("object");
            }
            return Colors.black;
          })),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 15.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 13.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blueGray500,
          fontSize: 11.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 28.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: appTheme.blueGray500,
          fontSize: 11.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 18.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 15.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 13.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF008083),
    primaryContainer: Color(0XFF0F172A),
    secondary: Color(0XFF0F172A),
    secondaryContainer: Color(0XFF5E5E5E),
    tertiary: Color(0XFF0F172A),
    tertiaryContainer: Color(0XFF5E5E5E),

    // Background colors
    background: Color(0XFF0F172A),

    // Surface colors
    surface: Color(0XFF0F172A),
    surfaceTint: Color(0XFF0C0C26),
    surfaceVariant: Color(0XFF5E5E5E),

    // Error colors
    error: Color(0XFF0C0C26),
    errorContainer: Color(0XFF27487F),
    onError: Color(0X33008083),
    onErrorContainer: Color(0X7EFFFFFF),

    // On colors(text colors)
    onBackground: Color(0XFF94969D),
    onInverseSurface: Color(0X33008083),
    onPrimary: Color(0XFF0C0C26),
    onPrimaryContainer: Color(0XFF94969D),
    onSecondary: Color(0XFF94969D),
    onSecondaryContainer: Color(0XFF0C0C26),
    onTertiary: Color(0XFF94969D),
    onTertiaryContainer: Color(0XFF0C0C26),

    // Other colors
    outline: Color(0XFF0C0C26),
    outlineVariant: Color(0XFF0F172A),
    scrim: Color(0XFF0F172A),
    shadow: Color(0XFF0C0C26),

    // Inverse colors
    inversePrimary: Color(0XFF0F172A),
    inverseSurface: Color(0XFF0C0C26),

    // Pending colors
    onSurface: Color(0XFF94969D),
    onSurfaceVariant: Color(0XFF0C0C26),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber700 => Color(0XFFF59E0B);

  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => Color(0XFFCBD5E1);
  Color get blueGray10001 => Color(0XFFD9D9D9);
  Color get blueGray200 => Color(0XFFABB5C2);
  Color get blueGray400 => Color(0XFF8A8A8A);
  Color get blueGray40001 => Color(0XFF888888);
  Color get blueGray50 => Color(0XFFECF8F3);
  Color get blueGray500 => Color(0XFF64748B);
  Color get blueGray5001 => Color(0XFFEFF1F3);
  Color get blueGray60014 => Color(0X14585E7D);
  Color get blueGray800 => Color(0XFF334155);
  Color get blueGray900 => Color(0XFF313131);
  Color get blueGray90001 => Color(0XFF132440);

  // BlueGrayc
  Color get blueGray8000c => Color(0X0C404852);

  // Cyan
  Color get cyan300 => Color(0XFF52B6DF);
  Color get cyan50 => Color(0XFFDCF0F9);
  Color get cyan500 => Color(0XFF01C1C6);
  Color get cyan50001 => Color(0XFF00CDD2);
  Color get cyan5001 => Color(0XFFE4FEFF);

  // DeepOrange
  Color get deepOrange900 => Color(0XFFB45309);

  // Gray
  Color get gray100 => Color(0XFFF1F5F9);
  Color get gray10001 => Color(0XFFF3F5F8);
  Color get gray10002 => Color(0XFFF2F2F2);
  Color get gray200 => Color(0XFFEFEFEF);
  Color get gray300 => Color(0XFFE1E3E8);
  Color get gray30001 => Color(0XFFDADADA);
  Color get gray30002 => Color(0XFFE0E0E0);
  Color get gray30003 => Color(0XFFE5E5E5);
  Color get gray30004 => Color(0XFFDBDBDB);
  Color get gray400 => Color(0XFFB0B0B0);
  Color get gray50 => Color(0XFFF8FAFC);
  Color get gray500 => Color(0XFFADADAD);
  Color get gray50001 => Color(0XFF95969D);
  Color get gray600 => Color(0XFF777777);
  Color get gray800 => Color(0XFF3A3A3A);
  Color get gray900 => Color(0XFF272727);

  // Green
  Color get green800 => Color(0XFF0BAC00);
  Color get green80001 => Color(0XFF2A714F);

  // Indigo
  Color get indigo400 => Color(0XFF4178D4);
  Color get indigo50 => Color(0XFFD9E4F6);
  Color get indigo5001 => Color(0XFFE5EAF0);
  Color get indigo5002 => Color(0XFFDBE6F9);
  Color get indigo5003 => Color(0XFFE4E9EF);
  Color get indigo5004 => Color(0XFFE3E8EF);

  // Orange
  Color get orange100 => Color(0XFFFCE2B6);

  // Pink
  Color get pink900 => Color(0XFF86242E);

  // Red
  Color get red600 => Color(0XFFE03C4C);
  Color get red700 => Color(0XFFE92020);
  Color get redA700 => Color(0XFFE30000);

  // Teal
  Color get teal200 => Color(0XFF6AC1C3);
  Color get teal300 => Color(0XFF47B3B6);
  Color get teal30001 => Color(0XFF46BD84);

  // Yellow
  Color get yellow900 => Color(0XFFE8782D);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
